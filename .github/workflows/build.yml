name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.9']
        include:
          - os: windows-latest
            asset_name: course-nfo-manager-windows.exe
            asset_content_type: application/vnd.microsoft.portable-executable
          - os: macos-latest
            asset_name: course-nfo-manager-macos
            asset_content_type: application/x-mach-binary
          - os: ubuntu-latest
            asset_name: course-nfo-manager-linux
            asset_content_type: application/x-executable

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Configure poetry
      run: |
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: |
        poetry install

    - name: Install PyInstaller
      run: |
        pip install pyinstaller

    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --icon=docs/icon.ico --name=${{ matrix.asset_name }} main.py

    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --onefile --windowed --icon=docs/icon.icns --name=${{ matrix.asset_name }} main.py

    - name: Build with PyInstaller (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --name=${{ matrix.asset_name }} main.py

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.asset_name }}*
        retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          course-nfo-manager-windows.exe/course-nfo-manager-windows.exe
          course-nfo-manager-macos/course-nfo-manager-macos
          course-nfo-manager-linux/course-nfo-manager-linux
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 