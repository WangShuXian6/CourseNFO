name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.8']
        include:
          - os: windows-latest
            binary_stem: course-nfo-manager-windows
            archive_name: course-nfo-manager-windows.zip
          - os: macos-latest
            binary_stem: course-nfo-manager-macos
            archive_name: course-nfo-manager-macos.app.zip
          - os: ubuntu-latest
            binary_stem: course-nfo-manager-linux
            archive_name: course-nfo-manager-linux.zip

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Configure poetry
        run: |
          poetry config virtualenvs.create false

      - name: Install dependencies
        run: |
          poetry install

      - name: Install build-time tools
        run: |
          pip install pyinstaller pillow
          # 某些环境里 pathlib 与 stdlib 冲突，可按需卸载：
          # pip uninstall -y pathlib || true

      # ---------- 从 docs/nfo.png 生成平台图标 ----------
      - name: Prepare icons on Windows (.ico)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (-not (Test-Path "docs/nfo.png")) { throw "docs/nfo.png not found" }
          $script = @'
          from PIL import Image
          img = Image.open("docs/nfo.png").convert("RGBA")
          sizes = [(16,16),(24,24),(32,32),(48,48),(64,64),(128,128),(256,256)]
          img.save("docs/icon.ico", sizes=sizes)
          '@
                    $script | python -

                - name: Prepare icons on macOS (.icns)
                  if: matrix.os == 'macos-latest'
                  shell: bash
                  run: |
                    set -euo pipefail
                    [ -f "docs/nfo.png" ] || { echo "docs/nfo.png not found"; exit 1; }
                    rm -rf docs/App.iconset
                    mkdir -p docs/App.iconset
                    for s in 16 32 128 256 512; do
                      sips -z $s $s docs/nfo.png --out docs/App.iconset/icon_${s}x${s}.png >/dev/null
                      s2=$((s*2))
                      sips -z $s2 $s2 docs/nfo.png --out docs/App.iconset/icon_${s}x${s}@2x.png >/dev/null
                    done
                    cp docs/App.iconset/icon_512x512@2x.png docs/App.iconset/icon_1024x1024.png || true
                    iconutil -c icns docs/App.iconset -o docs/icon.icns

                - name: Prepare icons on Linux (.ico)
                  if: matrix.os == 'ubuntu-latest'
                  shell: bash
                  run: |
                    set -euo pipefail
                    [ -f "docs/nfo.png" ] || { echo "docs/nfo.png not found"; exit 1; }
                    python - <<'PY'
          from PIL import Image
          img = Image.open("docs/nfo.png").convert("RGBA")
          sizes = [(16,16),(24,24),(32,32),(48,48),(64,64),(128,128),(256,256)]
          img.save("docs/icon.ico", sizes=sizes)
          PY

      # --------------------- 构建 ----------------------
      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $iconArg = ""
          if (Test-Path "docs/icon.ico") { $iconArg = "--icon=docs/icon.ico" }
          pyinstaller --onefile --windowed $iconArg --name "${{ matrix.binary_stem }}" main.py

      - name: Build with PyInstaller (macOS, produce .app)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          ICON_ARG=""
          [ -f "docs/icon.icns" ] && ICON_ARG="--icon=docs/icon.icns"
          pyinstaller --onefile --windowed $ICON_ARG --name "${{ matrix.binary_stem }}" main.py

      - name: Build with PyInstaller (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          ICON_ARG=""
          [ -f "docs/icon.ico" ] && ICON_ARG="--icon=docs/icon.ico"
          pyinstaller --onefile $ICON_ARG --name "${{ matrix.binary_stem }}" main.py

      # Linux 裸二进制加执行位（macOS 用 .app 时无需）
      - name: Fix permissions (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          chmod +x "dist/${{ matrix.binary_stem }}"

      # -------------------- 打包为 zip -----------------
      - name: Package (zip) on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Compress-Archive -Path "dist\\${{ matrix.binary_stem }}.exe" -DestinationPath "dist\\${{ matrix.archive_name }}" -Force

      - name: Package (zip) on macOS - zip the .app bundle
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          cd dist
          if [ -d "${{ matrix.binary_stem }}.app" ]; then
            /usr/bin/zip -9 -r "${{ matrix.archive_name }}" "${{ matrix.binary_stem }}.app"
          else
            echo "WARNING: .app not found; zipping bare binary instead (icon won't show in Finder/Dock)."
            /usr/bin/zip -9 -r "${{ matrix.archive_name }}" "${{ matrix.binary_stem }}"
          fi

      - name: Package (zip) on Linux
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          cd dist && zip -9 -r "${{ matrix.archive_name }}" "${{ matrix.binary_stem }}"

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: dist/${{ matrix.archive_name }}
          retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: List files
        run: ls -lah

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            course-nfo-manager-windows.zip
            course-nfo-manager-macos.app.zip
            course-nfo-manager-linux.zip
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 发布说明
            - 使用 docs/nfo.png 作为唯一源图标，自动生成 Windows .ico / macOS .icns
            - macOS 输出 .app（带图标），首次运行若被 Gatekeeper 拦截，可右键“打开”或：
              `xattr -dr com.apple.quarantine "<App>.app"`
            - 全平台产物均打包为 .zip